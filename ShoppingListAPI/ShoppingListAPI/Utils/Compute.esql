BROKER SCHEMA Utils

DECLARE ShoppingList SHARED ROW;
DECLARE Initialised SHARED BOOLEAN FALSE;

CREATE COMPUTE MODULE getShoppinglist_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF Initialised=FALSE THEN
			CALL Utils.Initialise();
		END IF;
		CALL CopyMessageHeaders();
		SET OutputLocalEnvironment = InputLocalEnvironment;
		-- Process the 'limit' parameter from the inbound request.
		-- If it is not specified, then default to -1 (all of the items).
		DECLARE limit INTEGER -1;
		IF FIELDTYPE(InputLocalEnvironment.REST.Input.Parameters.Limit) IS NOT NULL THEN
			-- Set up a handler for cast exceptions, and then attempt to cast the parameter to an integer.
			DECLARE EXIT HANDLER FOR SQLSTATE LIKE '%'
			BEGIN
				SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 400;
				SET OutputRoot.JSON.Data.error = 'The value provided for the ''Limit'' parameter is not a valid integer.';
				RETURN TRUE;
			END;
			SET limit = CAST(InputLocalEnvironment.REST.Input.Parameters.Limit AS INTEGER);
		END IF;
		-- Create a top level JSON array that will hold the customer records.
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
		SET OutputRoot.JSON.Data TYPE = JSON.Array;
		DECLARE output REFERENCE TO OutputRoot.JSON.Data;
		-- Retrieve the customer records by calling Java code.
		DECLARE counter INTEGER 1;
		IF limit = -1 THEN
			SET limit = CARDINALITY(ShoppingList.Item[]);
		END IF;
		WHILE counter <= limit DO
			SET OutputRoot.JSON.Data.Item[counter] = ShoppingList.Item[counter];
			SET counter = counter + 1;
		END WHILE;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;

CREATE COMPUTE MODULE postShoppinglist_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF Initialised=FALSE THEN
			CALL Initialise();
		END IF;
		CALL CopyMessageHeaders();
		DECLARE NewItemRef REFERENCE TO ShoppingList;
		CREATE LASTCHILD OF ShoppingList AS NewItemRef NAME 'Item';
		SET ShoppingList.Item[<] = InputRoot.JSON.Data;
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 201;		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;


CREATE COMPUTE MODULE putItem_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyMessageHeaders();
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 404;		
		-- Setting this first means defaulting to 404 if we get no hits later
		DECLARE NewItemRef REFERENCE TO ShoppingList;
		MOVE NewItemRef FIRSTCHILD;
		WHILE LASTMOVE(NewItemRef) DO
			IF NewItemRef.name = InputLocalEnvironment.REST.Input.Parameters.item THEN
				SET NewItemRef.name = InputRoot.JSON.Data.name;
				SET NewItemRef.department = InputRoot.JSON.Data.department;
				SET NewItemRef.description = InputRoot.JSON.Data.description;
				SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 201;
			END IF;
			MOVE NewItemRef NEXTSIBLING;
		END WHILE;		
				
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;

CREATE COMPUTE MODULE deleteItem_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();		
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 404;
		DECLARE NewItemRef REFERENCE TO ShoppingList;
		MOVE NewItemRef FIRSTCHILD;
		WHILE LASTMOVE(NewItemRef) DO
			IF NewItemRef.name = InputLocalEnvironment.REST.Input.Parameters.item THEN
				SET NewItemRef = NULL;
				SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 200;
			END IF;			
			MOVE NewItemRef NEXTSIBLING;
		END WHILE;		
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;

	CREATE PROCEDURE Initialise() BEGIN
		SET ShoppingList.Item[1].name = 'Bread';
		SET ShoppingList.Item[1].department = 'Bakery';
		SET ShoppingList.Item[1].description = 'The best loaf for nearly no dough';
		SET ShoppingList.Item[2].name = 'Chocolates';
		SET ShoppingList.Item[2].department = 'Confectionery';
		SET ShoppingList.Item[2].description = 'The most chocolate-y of chocolates';
		SET ShoppingList.Item[3].name = 'Crisps';
		SET ShoppingList.Item[3].department = 'Snacks';
		SET ShoppingList.Item[3].description = 'Crisps not chips (because chips are fries)';
		SET Initialised = TRUE;
	END;
